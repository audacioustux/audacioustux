apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: mimir
  namespace: argocd
  annotations:
    argocd.argoproj.io/compare-options: ServerSideDiff=true,IncludeMutationWebhook=true
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: kubeplane
  sources:
  - repoURL: https://grafana.github.io/helm-charts
    chart: mimir-distributed
    targetRevision: "~5.6.0"
    helm:
      valuesObject:
        global:
          dnsService: "coredns"
          extraEnv:
            # Blocks Bucket
            - name: BLOCKS_BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: mimir-blocks-bucket
                  key: BUCKET_NAME
            - name: BLOCKS_BUCKET_HOST
              valueFrom:
                configMapKeyRef:
                  name: mimir-blocks-bucket
                  key: BUCKET_HOST
            - name: BLOCKS_BUCKET_PORT
              valueFrom:
                configMapKeyRef:
                  name: mimir-blocks-bucket
                  key: BUCKET_PORT
            - name: BLOCKS_BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-blocks-bucket
                  key: AWS_ACCESS_KEY_ID
            - name: BLOCKS_BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-blocks-bucket
                  key: AWS_SECRET_ACCESS_KEY
            # Ruler Bucket
            - name: RULER_BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: mimir-ruler-bucket
                  key: BUCKET_NAME
            - name: RULER_BUCKET_HOST
              valueFrom:
                configMapKeyRef:
                  name: mimir-ruler-bucket
                  key: BUCKET_HOST
            - name: RULER_BUCKET_PORT
              valueFrom:
                configMapKeyRef:
                  name: mimir-ruler-bucket
                  key: BUCKET_PORT
            - name: RULER_BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-ruler-bucket
                  key: AWS_ACCESS_KEY_ID
            - name: RULER_BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-ruler-bucket
                  key: AWS_SECRET_ACCESS_KEY
            # Alerts Bucket
            - name: ALERTS_BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: mimir-alerts-bucket
                  key: BUCKET_NAME
            - name: ALERTS_BUCKET_HOST
              valueFrom:
                configMapKeyRef:
                  name: mimir-alerts-bucket
                  key: BUCKET_HOST
            - name: ALERTS_BUCKET_PORT
              valueFrom:
                configMapKeyRef:
                  name: mimir-alerts-bucket
                  key: BUCKET_PORT
            - name: ALERTS_BUCKET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-alerts-bucket
                  key: AWS_ACCESS_KEY_ID
            - name: ALERTS_BUCKET_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: mimir-alerts-bucket
                  key: AWS_SECRET_ACCESS_KEY
          podAnnotations:
            bucketSecretVersion: "0"
        metaMonitoring:
          serviceMonitor:
            enabled: true
        minio:
          enabled: false
        mimir:
          structuredConfig:
            alertmanager_storage:
              s3: &ruler_storage
                bucket_name: ${RULER_BUCKET_NAME}
                access_key_id: ${RULER_BUCKET_ACCESS_KEY}
                endpoint: ${RULER_BUCKET_HOST}:${RULER_BUCKET_PORT}
                secret_access_key: ${RULER_BUCKET_SECRET_KEY}
                insecure: true
            blocks_storage:
              backend: s3
              s3:
                bucket_name: ${BLOCKS_BUCKET_NAME}
                access_key_id: ${BLOCKS_BUCKET_ACCESS_KEY}
                endpoint: ${BLOCKS_BUCKET_HOST}:${BLOCKS_BUCKET_PORT}
                secret_access_key: ${BLOCKS_BUCKET_SECRET_KEY}
                insecure: true
            ruler_storage:
              s3:
                bucket_name: ${ALERTS_BUCKET_NAME}
                access_key_id: ${ALERTS_BUCKET_ACCESS_KEY}
                endpoint: ${ALERTS_BUCKET_HOST}:${ALERTS_BUCKET_PORT}
                secret_access_key: ${ALERTS_BUCKET_SECRET_KEY}
                insecure: true
  - repoURL: https://audacioustux.github.io/kubeplane
    chart: generic-helm
    targetRevision: "~1.0.0"
    helm:
      valuesObject:
        map:
          mimir-ruler-bucket:
            apiVersion: objectbucket.io/v1alpha1
            kind: ObjectBucketClaim
            spec:
              generateBucketName: mimir-ruler
              storageClassName: ceph-bucket
          mimir-blocks-bucket:
            apiVersion: objectbucket.io/v1alpha1
            kind: ObjectBucketClaim
            spec:
              generateBucketName: mimir-blocks
              storageClassName: ceph-bucket
          mimir-alerts-bucket:
            apiVersion: objectbucket.io/v1alpha1
            kind: ObjectBucketClaim
            spec:
              generateBucketName: mimir-alerts
              storageClassName: ceph-bucket
  destination:
    namespace: monitoring
    server: https://kubernetes.default.svc
  syncPolicy:
    syncOptions:
      - Validate=true
      - PruneLast=true
      - ApplyOutOfSyncOnly=true
      - ServerSideApply=true
      - FailOnSharedResource=true
      - RespectIgnoreDifferences=true
      - CreateNamespace=true
    automated:
      prune: true
      selfHeal: true

